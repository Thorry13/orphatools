[{"path":"https://thorry13.github.io/orphatools/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://thorry13.github.io/orphatools/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://thorry13.github.io/orphatools/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://thorry13.github.io/orphatools/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://thorry13.github.io/orphatools/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://thorry13.github.io/orphatools/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://thorry13.github.io/orphatools/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://thorry13.github.io/orphatools/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://thorry13.github.io/orphatools/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://thorry13.github.io/orphatools/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://thorry13.github.io/orphatools/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://thorry13.github.io/orphatools/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://thorry13.github.io/orphatools/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://thorry13.github.io/orphatools/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://thorry13.github.io/orphatools/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://thorry13.github.io/orphatools/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://thorry13.github.io/orphatools/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://thorry13.github.io/orphatools/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://thorry13.github.io/orphatools/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://thorry13.github.io/orphatools/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://thorry13.github.io/orphatools/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":[]},{"path":"https://thorry13.github.io/orphatools/articles/orphatools-vignette.html","id":"installation","dir":"Articles","previous_headings":"Getting started","what":"Installation","title":"orphatools (R interface)","text":"available installation CRAN yet. load orphatools package use R code:","code":"library(orphatools)"},{"path":"https://thorry13.github.io/orphatools/articles/orphatools-vignette.html","id":"check-options","dir":"Articles","previous_headings":"Getting started","what":"Check options","title":"orphatools (R interface)","text":"Orphanet publishes data regular basis various language versions, first check options corrrectly set: order update Orphanet data orphatools, need add via add_nomenclature_pack add_associated_genes.","code":"orphatools_options()"},{"path":"https://thorry13.github.io/orphatools/articles/orphatools-vignette.html","id":"load-data","dir":"Articles","previous_headings":"Getting started","what":"Load data","title":"orphatools (R interface)","text":"can start handling Orphanet data using available loading functions: Alternatively, can easily access ORPHAcode properties following functions:","code":"# Data from the nomenclature pack df_nomenclature = load_raw_nomenclature() classif_data = load_classifications() df_synonyms = load_synonyms() df_redirections = load_raw_redirections()  # Accessibility: Translate Orphanet concepts using internal dictionary df_nomenclature = load_nomenclature() df_redirections = load_redirections()  # Data from the associated genes file df_associated_genes = load_associated_genes() df_genes_synonyms = load_genes_synonyms() orpha_code = 303 get_label(orpha_code) get_classification_level(orpha_code) get_status(orpha_code) get_type(orpha_code) #> [1] \"Dystrophic epidermolysis bullosa\" #> [1] \"Group\" #> [1] \"Active\" #> [1] \"Clinical group\""},{"path":[]},{"path":"https://thorry13.github.io/orphatools/articles/orphatools-vignette.html","id":"analyze-genealogy","dir":"Articles","previous_headings":"Operations on classification","what":"Analyze genealogy","title":"orphatools (R interface)","text":"orphatools igraph provide usefool functions analyze Orphanet classification system.","code":""},{"path":"https://thorry13.github.io/orphatools/articles/orphatools-vignette.html","id":"parents-children-siblings","dir":"Articles","previous_headings":"Operations on classification > Analyze genealogy","what":"Parents, children, siblings","title":"orphatools (R interface)","text":"","code":"orpha_code = 303 get_parents(orpha_code) #> [1] \"139027\" \"79361\" get_children(orpha_code) #> [1] \"79408\"  \"79409\"  \"595356\" \"79411\"  \"89842\"  \"89843\"  \"231568\" get_siblings(orpha_code) #>  [1] \"230857\" \"100\"    \"774\"    \"3071\"   \"191\"    \"3440\"   \"902\"    \"113\"    #>  [9] \"500\"    \"37\"     \"1116\"   \"1117\"   \"1253\"   \"1662\"   \"2176\"   \"139\"    #> [17] \"2272\"   \"2273\"   \"2309\"   \"2556\"   \"740\"    \"2959\"   \"3455\"   \"910\"    #> [25] \"209\"    \"2295\"   \"758\"    \"257\"    \"305\"    \"530\"    \"33445\"  \"79143\"  #> [33] \"79373\"  \"98249\"  \"220295\" \"289465\" \"352712\" \"363992\" \"438134\" \"90342\"  #> [41] \"304\"    \"2908\""},{"path":"https://thorry13.github.io/orphatools/articles/orphatools-vignette.html","id":"ancestors-descendants","dir":"Articles","previous_headings":"Operations on classification > Analyze genealogy","what":"Ancestors, descendants","title":"orphatools (R interface)","text":"functions also work vector ORPHAcodes input. case, returned value corresponds union ancestors/descendants.","code":"orpha_code = 303 get_ancestors(orpha_code) #> [1] \"93890\"  \"139027\" \"98053\"  \"68346\"  \"183426\" \"79361\"  \"183530\" \"89826\"  #> [9] \"79353\" get_descendants(orpha_code) #>  [1] \"595356\" \"79410\"  \"158673\" \"158676\" \"79408\"  \"79409\"  \"79411\"  \"89842\"  #>  [9] \"89843\"  \"231568\" orpha_codes = c(303, 304) get_ancestors(orpha_codes) #> [1] \"93890\"  \"139027\" \"98053\"  \"68346\"  \"183426\" \"79361\"  \"183530\" \"89826\"  #> [9] \"79353\" get_descendants(orpha_codes) #>  [1] \"595356\" \"79410\"  \"158673\" \"158676\" \"79408\"  \"79409\"  \"79411\"  \"89842\"  #>  [9] \"89843\"  \"231568\" \"595346\" \"412181\" \"412189\" \"79396\"  \"79397\"  \"79399\"  #> [17] \"79400\"  \"79401\"  \"89838\"  \"158681\" \"595351\" \"2325\"   \"257\"    \"300333\" #> [25] \"508529\" \"158684\""},{"path":"https://thorry13.github.io/orphatools/articles/orphatools-vignette.html","id":"lowest-common-ancestor-lca","dir":"Articles","previous_headings":"Operations on classification > Analyze genealogy","what":"Lowest common ancestor (LCA)","title":"orphatools (R interface)","text":"Lowest Common Ancestor (LCA) closest ancestor given ORPHAcodes common. possible several LCAs, belong independent branches.","code":"orpha_codes = c('303', '305', '595356') get_LCAs(orpha_codes) #> [1] \"139027\" \"79361\" get_LCAs(orpha_codes, df_classif=classif_data[['ORPHAclassification_187_rare_skin_diseases_fr_2023']]) #> [1] \"139027\" \"79361\""},{"path":"https://thorry13.github.io/orphatools/articles/orphatools-vignette.html","id":"complete-family","dir":"Articles","previous_headings":"Operations on classification > Analyze genealogy","what":"Complete family","title":"orphatools (R interface)","text":"complete_family equivalent find ancestors limited level (e.g. grand-parents max_depth=2), return whole set branches induced, including parents, siblings, cousins, … See Visualization section plot color graph.","code":"orpha_codes = c('79400', '79401', '79410') graph_family = complete_family(orpha_codes, max_depth=1) graph_family = complete_family(orpha_codes, max_depth=2)"},{"path":"https://thorry13.github.io/orphatools/articles/orphatools-vignette.html","id":"alternate-output","dir":"Articles","previous_headings":"Operations on classification > Analyze genealogy","what":"Alternate output","title":"orphatools (R interface)","text":"functions, sometimes useful get equivalent edgelist graph, using output argument:","code":"df_parents = get_parents(orpha_code, output='edgelist') graph_descendants = get_descendants(orpha_code, output='graph')"},{"path":"https://thorry13.github.io/orphatools/articles/orphatools-vignette.html","id":"find-upper-classification-levels","dir":"Articles","previous_headings":"Operations on classification","what":"Find upper classification levels","title":"orphatools (R interface)","text":"recommended use subtype_to_disorder orpha_code large vector efficiency issues. need apply function wide set ORPHAcodes, probably need : convert data frame orpha_df object. usage force_nodes argument allows make appear ORPHAcode need (like disorder codes), even present data (subtypes ). group_by summarize/mutate. Filter disorder codes. See [Aggregation] section details.","code":"subtype_to_disorder(orpha_code = '158676') # 158676 is a subtype of disorder subtype_to_disorder(orpha_code = '303') # 303 is a group of disorder get_lowest_groups(orpha_code = '158676') #> [1] \"595356\" #> character(0) #> [1] \"303\""},{"path":"https://thorry13.github.io/orphatools/articles/orphatools-vignette.html","id":"specify-classification","dir":"Articles","previous_headings":"Operations on classification","what":"Specify classification","title":"orphatools (R interface)","text":"functions described , possible analyze specific classification df_classif argument. might want restricted edgelist one functions , directly take one 34 Orphanet classifications, stored list returned load_classifications. Find corresponding classification following: examples:","code":"all_classif = load_classifications() cat(sprintf('%s\\n', names(all_classif))) #> 146_rare_cardiac_diseases_en_2023 #>  147_rare_developmental_anomalies_during_embryogenesis_en_2023 #>  148_rare_cardiac_malformations_en_2023 #>  150_rare_inborn_errors_of_metabolism_en_2023 #>  152_rare_gastroenterological_diseases_en_2023 #>  156_rare_genetic_diseases_en_2023 #>  181_rare_neurological_diseases_en_2023 #>  182_rare_abdominal_surgical_diseases_en_2023 #>  183_rare_hepatic_diseases_en_2023 #>  184_rare_respiratory_diseases_en_2023 #>  185_rare_urogenital_diseases_en_2023 #>  186_rare_surgical_thoracic_diseases_en_2023 #>  187_rare_skin_diseases_en_2023 #>  188_rare_renal_diseases_en_2023 #>  189_rare_ophthalmic_diseases_en_2023 #>  193_rare_endocrine_diseases_en_2023 #>  194_rare_hematological_diseases_en_2023 #>  195_rare_immunological_diseases_en_2023 #>  196_rare_systemic_and_rheumatological_diseases_en_2023 #>  197_rare_odontological_diseases_en_2023 #>  198_rare_circulatory_system_diseases_en_2023 #>  199_rare_bone_diseases_en_2023 #>  200_rare_otorhinolaryngological_diseases_en_2023 #>  201_rare_infertility_disorders_en_2023 #>  202_rare_neoplastic_diseases_en_2023 #>  203_rare_infectious_diseases_en_2023 #>  204_rare_diseases_due_to_toxic_effects_en_2023 #>  205_rare_gynecological_and_obstetric_diseases_en_2023 #>  209_rare_surgical_maxillo-facial_diseases_en_2023 #>  212_rare_allergic_disease_en_2023 #>  216_rare_teratologic_diseases_en_2023 #>  231_rare_systemic_and_rheumatological_diseases_of_childhood_en_2023 #>  233_rare_transplant-related_diseases_en_2023 #>  235_rare_disorder_without_a_determined_diagnosis_after_full_investigation_en_2023 orpha_code = 303 orpha_codes = c('79400', '79401', '79410') get_ancestors(orpha_code, df_classif=classif_data[['ORPHAclassification_156_rare_genetic_diseases_fr_2023']]) get_ancestors(orpha_code, df_classif=classif_data[['ORPHAclassification_146_rare_cardiac_diseases_fr_2023']]) get_siblings(orpha_code, df_classif=classif_data[['ORPHAclassification_156_rare_genetic_diseases_fr_2023']]) get_siblings(orpha_code, df_classif=classif_data[['ORPHAclassification_187_rare_skin_diseases_fr_2023']]) complete_family(orpha_codes, df_classif=classif_data[['ORPHAclassification_187_rare_skin_diseases_fr_2023']])"},{"path":"https://thorry13.github.io/orphatools/articles/orphatools-vignette.html","id":"visualization","dir":"Articles","previous_headings":"","what":"Visualization","title":"orphatools (R interface)","text":"Orphanet built large classification system sometimes needs specific display better understand ORPHAcodes related .","code":""},{"path":"https://thorry13.github.io/orphatools/articles/orphatools-vignette.html","id":"plot","dir":"Articles","previous_headings":"Visualization","what":"Plot","title":"orphatools (R interface)","text":"straightforward way visualize plot graph. Use layout argument sort ORPHAcodes top bottom.    larger graphs, static plot won’t enough see graph details. Try interactive_plot function dynamic plot, allows move/zoom change nodes position. can emphasize codes plotted graph locate specific ORPHAcodes color_codes, color_classification_level .","code":"orpha_code = 303 graph = get_ancestors(orpha_code, output='graph')  plot(graph) plot(graph, layout=igraph::layout_as_tree) plot(graph, layout=orphatools::layout_tree) interactive_plot(graph_ancestors) init_codes = c(303, 305) graph = get_descendants(init_codes, output='graph') %>%   color_codes(init_codes) %>%   color_class_levels() plot(graph)"},{"path":"https://thorry13.github.io/orphatools/articles/orphatools-vignette.html","id":"hierarchical-structures","dir":"Articles","previous_headings":"Visualization","what":"Hierarchical structures","title":"orphatools (R interface)","text":"","code":"orpha_codes = c(303, get_descendants('303'))  df = data.frame(orpha_code=orpha_codes) %>%   orpha_df(orpha_code_col='orpha_code') %>%   left_join(load_nomenclature(), by='orpha_code')  df_indent = apply_orpha_indent(df, indented_cols='label', prefix='Label_') kable(df_indent, 'html')"},{"path":"https://thorry13.github.io/orphatools/articles/orphatools-vignette.html","id":"aggregation-operations","dir":"Articles","previous_headings":"","what":"Aggregation operations","title":"orphatools (R interface)","text":"hierarchical structure like ORPHA trees, probably need take codes dependencies account. Let’s consider simplified structure following :  many cases, data operations lead something like : many patients can gathered ORPHAcode ?","code":"df_patients = data.frame(patient_id = c(1,1,2,3,4,5,6),                          code = c('303', '158673', '595356', '305', '79406', '79406', '595356'),                          status = factor(c('ongoing', 'confirmed', 'ongoing', 'ongoing', 'confirmed', 'ongoing', 'ongoing'), levels=c('ongoing', 'confirmed'), ordered=TRUE)) kable(df_patients, 'html')"},{"path":"https://thorry13.github.io/orphatools/articles/orphatools-vignette.html","id":"naive-grouping-method","dir":"Articles","previous_headings":"Aggregation operations","what":"Naive grouping method","title":"orphatools (R interface)","text":"basic grouping operation consider ORPHAcode independent.  naive counting method giving following results.","code":"df_counts = df_patients %>% group_by(code) %>% count() %>% as.data.frame() kable(df_counts, 'html')"},{"path":"https://thorry13.github.io/orphatools/articles/orphatools-vignette.html","id":"customized-grouping-method","dir":"Articles","previous_headings":"Aggregation operations","what":"Customized grouping method","title":"orphatools (R interface)","text":"Converting data frame orpha_df object change group_by behavior data :  can observe direct effect results method : might also want count distinct patients instead rows present data : also works mutate: interest focused disorders , keep mind subtype_to_disorder unadvised, computing reasons. method presented section considerably efficient sample size increases. simply can filter disorder codes get desired result. Finally desired ORPHAcode might still missing results. main reason absence ORPHAcode data, even subtypes mentioned. cases, force_nodes argument want :","code":"df_counts = df_patients %>% orpha_df(orpha_code_col = 'code') %>% group_by(code) %>% count() %>% as.data.frame() kable(df_counts, 'html') df_counts = df_patients %>% orpha_df(orpha_code_col = 'code') %>% group_by(code) %>% summarize(n = n_distinct(patient_id)) %>% as.data.frame() kable(df_counts, 'html') # Naive df_patients_extended = df_patients %>% group_by(code) %>% mutate(n_included = n_distinct(patient_id)) %>% as.data.frame() kable(df_patients_extended, 'html') # Turn on Orphanet mode df_patients_extended_orpha = df_patients %>% orpha_df(orpha_code_col = 'code') %>% group_by(code) %>% mutate(n_included = n_distinct(patient_id)) %>% as.data.frame() kable(df_patients_extended_orpha, 'html') df_nomenclature = load_nomenclature() %>% select(orpha_code, level) df_counts = df_patients %>%   orpha_df(orpha_code_col = 'code') %>%   group_by(code) %>%   summarize(n = n_distinct(patient_id)) %>%   left_join(df_nomenclature, by=c('code'='orpha_code')) %>%   filter(level == 'Disorder') %>%   as.data.frame() kable(df_counts, 'html') df_nomenclature = load_nomenclature() %>% select(orpha_code, level) df_status = df_patients %>%   orpha_df(orpha_code_col = 'code') %>%   group_by(patient_id, code) %>%   summarize(status = max(status)) %>%   left_join(df_nomenclature, by=c('code'='orpha_code')) kable(df_status, 'html') df_nomenclature = load_nomenclature() %>% select(orpha_code, level) df_counts = df_patients %>%   orpha_df(orpha_code_col = 'code', force_codes = 231568) %>%   group_by(code) %>%   summarize(n = n_distinct(patient_id)) %>%   left_join(df_nomenclature, by=c('code'='orpha_code')) %>%   filter(level == 'Disorder') %>%   as.data.frame() kable(df_counts, 'html')"},{"path":"https://thorry13.github.io/orphatools/articles/orphatools-vignette.html","id":"update-codes","dir":"Articles","previous_headings":"","what":"Update codes","title":"orphatools (R interface)","text":"Orphanet classification constantly evolves, may need retrospectively update ORPHAcodes registered database. package proposes solution two possible issues: ORPHAcodes need redirected (deprecated obsoletes). ORPHAcodes specific (using mutated genes information).","code":""},{"path":"https://thorry13.github.io/orphatools/articles/orphatools-vignette.html","id":"redirections","dir":"Articles","previous_headings":"Update codes","what":"Redirections","title":"orphatools (R interface)","text":"","code":"orpha_codes = c(304, 166068, 166457) redirect_code(orpha_codes) #> [1] \"304\"    \"166063\" \"166457\" redirect_code(orpha_codes, deprecated_only = TRUE) #> [1] \"304\"    \"166063\" \"166457\""},{"path":"https://thorry13.github.io/orphatools/articles/orphatools-vignette.html","id":"specifications","dir":"Articles","previous_headings":"Update codes","what":"Specifications","title":"orphatools (R interface)","text":"","code":"orpha_code_cmt1 = 65753 orpha_code_cmtX = 64747  # Specification possible specify_code(orpha_code_cmt1, 'MPZ', mode='symbol') # CMT1B is the lonely ORPHAcode both associated with CMT1 and MPZ #> [1] \"101082\" specify_code(orpha_code_cmt1, c('MPZ', 'POMT1'), mode='symbol') # POMT1 doesn't bring ambiguity #> [1] \"101082\"  # Specification impossible specify_code(orpha_code_cmtX, 'MPZ', mode='symbol') # No ORPHAcode is associated both to CMTX and MPZ #> [1] \"64747\" specify_code(orpha_code_cmt1, 'PMP22', mode='symbol') # Several ORPHAcodes are associated both to CMT1 and PMP22 (CMT1A and CMT1E) #> [1] \"65753\" specify_code(orpha_code_cmt1, c('MPZ', 'PMP22'), mode='symbol') # Several ORPHAcodes are associated both to CMT1 and PMP22 (CMT1A and CMT1E) #> [1] \"65753\""},{"path":"https://thorry13.github.io/orphatools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Remy Dumas. Author, maintainer.","code":""},{"path":"https://thorry13.github.io/orphatools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dumas R (2025). orphatools: Tools deal Orpha classifications. R package version 0.1.0.9008, https://thorry13.github.io/orphatools/, https://github.com/Thorry13/orphatools.","code":"@Manual{,   title = {orphatools: Tools to deal with the Orpha classifications},   author = {Remy Dumas},   year = {2025},   note = {R package version 0.1.0.9008, https://thorry13.github.io/orphatools/},   url = {https://github.com/Thorry13/orphatools}, }"},{"path":"https://thorry13.github.io/orphatools/index.html","id":"orphatools","dir":"","previous_headings":"","what":"Tools to deal with the Orpha classifications","title":"Tools to deal with the Orpha classifications","text":"goal orphatools …","code":""},{"path":"https://thorry13.github.io/orphatools/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools to deal with the Orpha classifications","text":"can install development version orphatools like :","code":"# FILL THIS IN! HOW CAN PEOPLE INSTALL YOUR DEV PACKAGE?"},{"path":"https://thorry13.github.io/orphatools/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Tools to deal with the Orpha classifications","text":"basic example shows solve common problem: special using README.Rmd instead just README.md? can include R chunks like : ’ll still need render README.Rmd regularly, keep README.md --date. devtools::build_readme() handy . also use GitHub Actions re-render README.Rmd every time push. example workflow can found : https://github.com/r-lib/actions/tree/v1/examples. can also embed plots, example:  case, don’t forget commit push resulting figure files, display GitHub CRAN.","code":"library(orphatools) ## basic example code summary(cars) #>      speed           dist        #>  Min.   : 4.0   Min.   :  2.00   #>  1st Qu.:12.0   1st Qu.: 26.00   #>  Median :15.0   Median : 36.00   #>  Mean   :15.4   Mean   : 42.98   #>  3rd Qu.:19.0   3rd Qu.: 56.00   #>  Max.   :25.0   Max.   :120.00"},{"path":"https://thorry13.github.io/orphatools/reference/add-dictionary.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a dictionary — add-dictionary","title":"Add a dictionary — add-dictionary","text":"dictionary used interprete Orphanet concepts, given ids. Copy dictionary template add package modification. added, dictionary appear among available options orphatools_options() interface. can also manually set using built-options() function \"nomenclature_version\" name.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/add-dictionary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a dictionary — add-dictionary","text":"","code":"copy_dict_template(dest_path = \".\")  add_dictionary(   filepath,   default = FALSE,   destdir = tools::R_user_dir(\"orphatools\", \"data\") )"},{"path":"https://thorry13.github.io/orphatools/reference/add-dictionary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a dictionary — add-dictionary","text":"dest_path destination path dictionary template copied. filepath location .csv file containing labels another language. template dicitonary can saved using copy_dict_template. default TRUE, set added dictionary default. destdir destination directory, processed data saved.","code":""},{"path":[]},{"path":"https://thorry13.github.io/orphatools/reference/add_associated_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Add ORPHAcodes-genes associations to orphatools. — add_associated_genes","title":"Add ORPHAcodes-genes associations to orphatools. — add_associated_genes","text":"function analyzes file containing associations ORPHAcodes genes saves internally R-friendly format.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/add_associated_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add ORPHAcodes-genes associations to orphatools. — add_associated_genes","text":"","code":"add_associated_genes(   filepath,   default = FALSE,   force = FALSE,   destdir = tools::R_user_dir(\"orphatools\", \"data\") )"},{"path":"https://thorry13.github.io/orphatools/reference/add_associated_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add ORPHAcodes-genes associations to orphatools. — add_associated_genes","text":"filepath xml file published Orphanet containing associations ORPHAcodes genes. default TRUE, set added association file default. force TRUE, adds association file even identical version internally found. destdir destination directory, processed data saved.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/add_associated_genes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add ORPHAcodes-genes associations to orphatools. — add_associated_genes","text":"Orphanet publishes genes data 6-months basis, deployed english . different file versions available . must downloaded locally added orphatools. gene mutation may various effects individuals health, file indicates genes clinical entities related, giving association type status. Genes can referred multiple referentials including HGNC, OMIM, Ensembl, Genatlas, Reactome SwissProt. added file version appear among available options orphatools_options() interface. can also manually set using built-options() function \"gene_file_version\" name.","code":""},{"path":[]},{"path":"https://thorry13.github.io/orphatools/reference/add_nomenclature_pack.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a nomenclature pack to orphatools — add_nomenclature_pack","title":"Add a nomenclature pack to orphatools — add_nomenclature_pack","text":"function analyzes nomenclature pack files saves internally R-friendly format.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/add_nomenclature_pack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a nomenclature pack to orphatools — add_nomenclature_pack","text":"","code":"add_nomenclature_pack(   zip_filepath,   default = FALSE,   force = FALSE,   destdir = tools::R_user_dir(\"orphatools\", \"data\") )"},{"path":"https://thorry13.github.io/orphatools/reference/add_nomenclature_pack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a nomenclature pack to orphatools — add_nomenclature_pack","text":"zip_filepath location .zip file containing nomenclature pack. default TRUE, set added pack default. force TRUE, adds pack even identical version internally found. destdir destination directory, processed data saved.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/add_nomenclature_pack.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a nomenclature pack to orphatools — add_nomenclature_pack","text":"Orphanet publishes nomenclature pack yearly basis, deployed different language versions. different nomenclature pack versions available . must downloaded locally uncompressed added orphatools. uncompressed Orphanet nomenclature pack contains set .xml .xlsx files coding, including nomenclature file (e.g. ORPHAnomenclature_fr_2023.xml) set 30 classifications (usually contained Classifications folder). nomenclature file contains ORPHAcode associated properties, like associated label (synonyms), status (active ), classification levels (group disorder, disorder subtype disorder), redirections another ORPHAcode (deprecated obsolete ). classification contains numerous /relationships clinical entities, depicting global Orphanet classification system. added, nomenclature pack appear among available options orphatools_options() interface. can also manually set using built-options() function \"nomenclature_version\" name.","code":""},{"path":[]},{"path":"https://thorry13.github.io/orphatools/reference/add_superNode.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an extra node above the roots of the graph — add_superNode","title":"Add an extra node above the roots of the graph — add_superNode","text":"Add extra node roots graph","code":""},{"path":"https://thorry13.github.io/orphatools/reference/add_superNode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an extra node above the roots of the graph — add_superNode","text":"","code":"add_superNode(graph)"},{"path":"https://thorry13.github.io/orphatools/reference/add_superNode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an extra node above the roots of the graph — add_superNode","text":"graph graph extra node added.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/add_superNode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an extra node above the roots of the graph — add_superNode","text":"new graph added node","code":""},{"path":"https://thorry13.github.io/orphatools/reference/analyze-genealogy.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyze ORPHA classifications — analyze-genealogy","title":"Analyze ORPHA classifications — analyze-genealogy","text":"Orphanet classification system can seen wide genealogy tree, following terms refer field. two classes functions: Functions applied single ORPHAcode: get_parents get_children get_ancestors get_descendants get_siblings Functions applied set ORPHAcodes: get_ancestors get_descendants complete_family get_LCAs want analyze whole Orphanet classification system, df_classif set. ORPHAcodes needed, without edges information, set output='codes_only'. Alternatively, wish analyze visualize ORPHAcodes interactions, set output='edgelist' output='graph'.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/analyze-genealogy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyze ORPHA classifications — analyze-genealogy","text":"","code":"get_parents(   orpha_code,   output = c(\"codes_only\", \"edgelist\", \"graph\"),   df_classif = NULL )  get_children(   orpha_code,   output = c(\"codes_only\", \"edgelist\", \"graph\"),   df_classif = NULL )  get_ancestors(   orpha_codes,   output = c(\"codes_only\", \"edgelist\", \"graph\"),   max_depth = NULL,   df_classif = NULL )  get_descendants(   orpha_codes,   output = c(\"codes_only\", \"edgelist\", \"graph\"),   max_depth = NULL,   df_classif = NULL )  get_siblings(   orpha_code,   output = c(\"codes_only\", \"edgelist\", \"graph\"),   df_classif = NULL )  complete_family(   orpha_codes,   output = c(\"codes_only\", \"edgelist\", \"graph\"),   df_classif = NULL,   max_depth = 1 )  get_LCAs(orpha_codes, df_classif = NULL)"},{"path":"https://thorry13.github.io/orphatools/reference/analyze-genealogy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyze ORPHA classifications — analyze-genealogy","text":"orpha_code ORPHAcode start . output value specifying output format. c(\"codes_only\", \"edgelist\", \"graph\"). df_classif classification data consider. NULL, load whole Orphanet classification. orpha_codes vector ORPHAcodes used perform operations. max_depth maximum reached depth starting given ORPHAcode.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/analyze-genealogy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyze ORPHA classifications — analyze-genealogy","text":"Results returned format specified output argument : 'codes_only', 'edgelist', 'graph'.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/analyze-genealogy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analyze ORPHA classifications — analyze-genealogy","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union all_classif = load_classifications() orpha_codes = c('303', '305', '595356') orpha_code = '303'  # --- # Ancestors ancestors = get_ancestors(orpha_code) ancestors_edges = get_ancestors(orpha_code, output='edgelist') ancestors_graph = get_ancestors(orpha_code, output='graph')  # Get parents only parents = get_ancestors(orpha_code, max_depth=1) parents = get_parents(orpha_code)  # Select a specific classification tree classif1 = all_classif[['ORPHAclassification_156_rare_genetic_diseases_fr']] ancestors = get_ancestors(orpha_code, df_classif=classif1)  classif2 = all_classif[['ORPHAclassification_146_rare_cardiac_diseases_fr']] ancestors = get_ancestors(orpha_code, df_classif=classif2)  # --- # Descendants descendants_codes = get_descendants(orpha_code) decendants_edges = get_descendants(orpha_code, output='edgelist') descendants_graph = get_descendants(orpha_code, output='graph')  # Get children only children = get_descendants(orpha_code, max_depth=1) children = get_children(orpha_code)  # --- # Siblings siblings = get_siblings(orpha_code) siblings_edges = get_siblings(orpha_code, output='edgelist') siblings_graph = get_siblings(orpha_code, output='graph')  # --- # Lowest common ancestors lcas = get_LCAs(orpha_codes)  classif = all_classif[['ORPHAclassification_187_rare_skin_diseases_fr']] lcas = get_LCAs(orpha_codes, df_classif = classif)  # --- # Complete family family_codes = complete_family(orpha_codes) family_codes = complete_family(orpha_codes, df_classif=all_classif[[1]]) #> Warning: The following ORPHAcodes do not belong to the classification : 303, 305, 595356. family_codes = complete_family(orpha_codes, max_depth=2) family_edges = complete_family(orpha_codes, output = 'edgelist') family_graph = complete_family(orpha_codes, output='graph')"},{"path":"https://thorry13.github.io/orphatools/reference/apply_orpha_indent.html","id":null,"dir":"Reference","previous_headings":"","what":"Indentation — apply_orpha_indent","title":"Indentation — apply_orpha_indent","text":"order make easier visualize ORPHAcodes contain others data.frame, function apply indentation, means associated ORPHAcode one level lower Orphanet classification ORPHAcode . ORPHAcodes may appear multiple rows can child several parents.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/apply_orpha_indent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Indentation — apply_orpha_indent","text":"","code":"apply_orpha_indent(   df,   df_classif = NULL,   indented_cols = NULL,   prefix = \"indent\" )"},{"path":"https://thorry13.github.io/orphatools/reference/apply_orpha_indent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Indentation — apply_orpha_indent","text":"df orpha_df() instantiation. df_classif classification data consider. NULL, find classifications containing given ORPHAcode. indented_cols columns need shifted. prefix prefix indented columns. Default \"indent\".","code":""},{"path":"https://thorry13.github.io/orphatools/reference/apply_orpha_indent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Indentation — apply_orpha_indent","text":"matrix right indentations applied requested columns","code":""},{"path":"https://thorry13.github.io/orphatools/reference/apply_orpha_indent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Indentation — apply_orpha_indent","text":"","code":"library(dplyr) orpha_codes = get_descendants('307711', output='codes_only')  df = orpha_df(data.frame(orpha_code=orpha_codes), orpha_code_col='orpha_code') %>%   left_join(load_nomenclature(), by='orpha_code') df_indented = apply_orpha_indent(df, indented_cols='label')"},{"path":"https://thorry13.github.io/orphatools/reference/classifications.html","id":null,"dir":"Reference","previous_headings":"","what":"Orphanet classifications — classifications","title":"Orphanet classifications — classifications","text":"functions presented analyze relationships ORPHAcodes returns results convenient format analysis display.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/classifications.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Orphanet classifications — classifications","text":"","code":"load_classifications()  load_all_classifications()  is_in_classif(orpha_code, df_classif)"},{"path":"https://thorry13.github.io/orphatools/reference/classifications.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Orphanet classifications — classifications","text":"orpha_code ORPHAcode. df_classif /data.frame providing relationships ORPHAcodes.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/classifications.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Orphanet classifications — classifications","text":"classifications list data.frame Returns TRUE given ORPHAcode belongs given classification, FALSE else.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/classifications.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Orphanet classifications — classifications","text":"Orphanet organized classification system around 34 different hierarchies, completely distinct. hierarchy listed set /relationships ORPHAcodes. child always specific parent. load_classifications Mind using bind_rows followed distinct merge classification. classification system change according chosen \"orphatools_nomenclature\" option, can set via orphatools_options() interface. Add new available option add_nomenclature_pack().","code":""},{"path":[]},{"path":"https://thorry13.github.io/orphatools/reference/classifications.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Orphanet classifications — classifications","text":"","code":"library(dplyr)  all_classif = load_classifications() df_all_classif = load_classifications() %>% bind_rows() %>% distinct()  is_in_classif(303, all_classif[[1]]) #> [1] FALSE is_in_classif(303, all_classif[[6]]) #> [1] TRUE"},{"path":"https://thorry13.github.io/orphatools/reference/color-graphs.html","id":null,"dir":"Reference","previous_headings":"","what":"Color graphs — color-graphs","title":"Color graphs — color-graphs","text":"color_codes colors given ORPHAcodes emphasize among others. color_classif_levels colors vertices given graph distinguish classification levels.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/color-graphs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Color graphs — color-graphs","text":"","code":"color_codes(graph, orpha_codes)  color_class_levels(graph)"},{"path":"https://thorry13.github.io/orphatools/reference/color-graphs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Color graphs — color-graphs","text":"graph graph color. orpha_codes nodes color.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/color-graphs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Color graphs — color-graphs","text":"colored graph","code":""},{"path":"https://thorry13.github.io/orphatools/reference/color-graphs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Color graphs — color-graphs","text":"","code":"# Build graph init_codes = c(303, 305) graph = get_descendants(init_codes, output='graph') plot(graph)   # Emphasize some specific ORPHAcodes graph = color_codes(graph, init_codes) plot(graph)   # Distinguish classification levels graph = color_class_levels(graph) plot(graph)"},{"path":"https://thorry13.github.io/orphatools/reference/get_all_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Disease labels — get_all_labels","title":"Disease labels — get_all_labels","text":"Extract synonyms given ORPHAcode well preferential label, given first position.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/get_all_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Disease labels — get_all_labels","text":"","code":"get_all_labels(orpha_code)"},{"path":"https://thorry13.github.io/orphatools/reference/get_all_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Disease labels — get_all_labels","text":"orpha_code ORPHAcode.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/get_all_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Disease labels — get_all_labels","text":"character vector containing labels associated given ORPHAcode.","code":""},{"path":[]},{"path":[]},{"path":"https://thorry13.github.io/orphatools/reference/graph-operations.html","id":null,"dir":"Reference","previous_headings":"","what":"Operations on graphs — graph-operations","title":"Operations on graphs — graph-operations","text":"Orphanet classification system can depicted oriented graphs wide list parent/child relationships. igraph package provides useful tools graphs analysis can use study rare diseases. roots ORPHAcodes without parent, like heads classification. leaves ORPHAcodes without children. usually disorders subtypes disorders (see get_classification_level()).","code":""},{"path":"https://thorry13.github.io/orphatools/reference/graph-operations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Operations on graphs — graph-operations","text":"","code":"find_roots(graph)  find_leaves(graph)"},{"path":"https://thorry13.github.io/orphatools/reference/graph-operations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Operations on graphs — graph-operations","text":"graph igraph object.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/graph-operations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Operations on graphs — graph-operations","text":"extrem nodes graph.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/graph-operations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Operations on graphs — graph-operations","text":"","code":"graph = get_ancestors('303', output='graph')  roots = find_roots(graph) leaves = find_leaves(graph)"},{"path":"https://thorry13.github.io/orphatools/reference/group_by.orpha_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Build group using Orphanet classifications — group_by.orpha_df","title":"Build group using Orphanet classifications — group_by.orpha_df","text":"method dplyr group_by() generic. extends initial groups adding rows containing descendants ORPHAcodes. way row may belong several groups. function force creation groups (may empty) ORPHAcode provided force_codes argument orpha_df() called.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/group_by.orpha_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build group using Orphanet classifications — group_by.orpha_df","text":"","code":"# S3 method for class 'orpha_df' group_by(.data, ...)"},{"path":"https://thorry13.github.io/orphatools/reference/group_by.orpha_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build group using Orphanet classifications — group_by.orpha_df","text":".data orpha_df() instantiation. ... group_by(), variables computations group . Computations always done ungrouped data frame. perform computations grouped data, need use separate mutate() step group_by(). Computations allowed nest_by(). ungroup(), variables remove grouping.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/group_by.orpha_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build group using Orphanet classifications — group_by.orpha_df","text":"","code":"library(dplyr)  # Build patients data.frame df_patients = data.frame(   patient_id = c(1,2,3,4,5,6),   group = c('A','A','A','B','B','B'),   code = c('158673', '595356', '305', '79406', '79406', '595356'))  df_counts = df_patients %>% group_by(code) attr(df_counts, 'groups') #> # A tibble: 4 × 2 #>   code         .rows #>   <chr>  <list<int>> #> 1 158673         [1] #> 2 305            [1] #> 3 595356         [2] #> 4 79406          [2]  df_counts = df_patients %>% orpha_df(orpha_code_col = 'code') %>% group_by(code) attr(df_counts, 'groups') #> # A tibble: 4 × 2 #>   code   .rows     #>   <chr>  <list>    #> 1 158673 <int [1]> #> 2 305    <int [3]> #> 3 595356 <int [3]> #> 4 79406  <int [2]>  df_counts = df_patients %>% orpha_df(orpha_code_col = 'code') %>% group_by(code, group) attr(df_counts, 'groups') #> # A tibble: 6 × 3 #> # Groups:   code [4] #>   code   group .rows     #>   <chr>  <chr> <list>    #> 1 158673 A     <int [1]> #> 2 305    A     <int [1]> #> 3 305    B     <int [2]> #> 4 595356 A     <int [2]> #> 5 595356 B     <int [1]> #> 6 79406  B     <int [2]>"},{"path":"https://thorry13.github.io/orphatools/reference/horizontal_positions.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate horizontal coordinates for each node of the given graph — horizontal_positions","title":"Calculate horizontal coordinates for each node of the given graph — horizontal_positions","text":"Calculate horizontal coordinates node given graph","code":""},{"path":"https://thorry13.github.io/orphatools/reference/horizontal_positions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate horizontal coordinates for each node of the given graph — horizontal_positions","text":"","code":"horizontal_positions(graph, df_y, h_size, root_node = NULL)"},{"path":"https://thorry13.github.io/orphatools/reference/horizontal_positions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate horizontal coordinates for each node of the given graph — horizontal_positions","text":"graph graph nodes positions (x axis) calculated. df_y Y coordinates useful simplify graph. h_size Horizontal widths graph level needed compute X positions. root_node root_node reference calculate X coordinates children. dataframe name relative_position columns. NULL, considers SuperNode graph roots relative_position=0.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/horizontal_sizes.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute how large should be the graph at each depth — horizontal_sizes","title":"Compute how large should be the graph at each depth — horizontal_sizes","text":"Compute large graph depth","code":""},{"path":"https://thorry13.github.io/orphatools/reference/horizontal_sizes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute how large should be the graph at each depth — horizontal_sizes","text":"","code":"horizontal_sizes(graph, df_y, root_node = NULL)"},{"path":"https://thorry13.github.io/orphatools/reference/horizontal_sizes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute how large should be the graph at each depth — horizontal_sizes","text":"graph graph nodes positions (x axis) calculated. df_y Y coordinates useful simplify graph. root_node root_node reference calculate X coordinates children. dataframe name relative_position columns. NULL, appplies function recursively root graph.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/in_between_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a graph from a set of ORPHAcodes — in_between_graph","title":"Extract a graph from a set of ORPHAcodes — in_between_graph","text":"extracted graph contains ORPHAcodes specified vs argument. may include ORPHAcodes inside, roots leaves part vs.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/in_between_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a graph from a set of ORPHAcodes — in_between_graph","text":"","code":"in_between_graph(vs, df_classif = NULL)"},{"path":"https://thorry13.github.io/orphatools/reference/in_between_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a graph from a set of ORPHAcodes — in_between_graph","text":"vs set ORPHAcodes used extract graph. df_classif classification consider. NULL, loads whole Orphanet classification.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/in_between_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a graph from a set of ORPHAcodes — in_between_graph","text":"extracted graph igraph object.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/interactive_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Dynamic plot — interactive_plot","title":"Dynamic plot — interactive_plot","text":"function uses visNetwork library better visualization larger graphs.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/interactive_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dynamic plot — interactive_plot","text":"","code":"interactive_plot(graph, layout_tree = FALSE)"},{"path":"https://thorry13.github.io/orphatools/reference/interactive_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dynamic plot — interactive_plot","text":"graph graph visualize. layout_tree TRUE, use layout_tree() set initial nodes position.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/interactive_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dynamic plot — interactive_plot","text":"","code":"if (FALSE) { # \\dontrun{ graph = get_descendants('68346', output='graph') interactive_plot(graph) } # }"},{"path":"https://thorry13.github.io/orphatools/reference/layout_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot using a tree-like layout — layout_tree","title":"Plot using a tree-like layout — layout_tree","text":"layout function specifically designed display Orphanet classifications. Indeed, contains /relationships, latter must oriented top bottom (bottom top reverse_y TRUE). function designed used plot.igraph() (layout argument). associated vertical positions obtained using vertical_positions.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/layout_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot using a tree-like layout — layout_tree","text":"","code":"layout_tree(graph, reverse_y = TRUE)  vertical_positions(graph)"},{"path":"https://thorry13.github.io/orphatools/reference/layout_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot using a tree-like layout — layout_tree","text":"graph graph display. reverse_y TRUE, display top bottom.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/layout_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot using a tree-like layout — layout_tree","text":"adapted layout plot nodes Orpha classifications","code":""},{"path":"https://thorry13.github.io/orphatools/reference/layout_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot using a tree-like layout — layout_tree","text":"","code":"graph = get_ancestors('303', output='graph')  plot(graph)  plot(graph, layout=igraph::layout_as_tree)  plot(graph, layout=layout_tree)   df_y = vertical_positions(graph)"},{"path":"https://thorry13.github.io/orphatools/reference/load-genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Associated genes — load-genes","title":"Associated genes — load-genes","text":"Load needed information explore associations ORPHAcodes genes. load_associated_genes loads association tables. load_gene_synonyms loads genes synonyms case available data refers genes different way.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/load-genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Associated genes — load-genes","text":"","code":"load_associated_genes()  load_genes_synonyms()"},{"path":"https://thorry13.github.io/orphatools/reference/load-genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Associated genes — load-genes","text":"data frame containing ORPHAcode kind association (). related gene known information (symbol, name, references, locus) latter.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/load-genes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Associated genes — load-genes","text":"loaded dataframes directly depend \"orphatools_gene_file\" option can set via orphatools_options() interface. can add available option add_associated_genes().","code":""},{"path":[]},{"path":"https://thorry13.github.io/orphatools/reference/load-genes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Associated genes — load-genes","text":"","code":"df_associated_genes = load_associated_genes() df_genes_synonyms = load_genes_synonyms()"},{"path":"https://thorry13.github.io/orphatools/reference/load_nomenclature.html","id":null,"dir":"Reference","previous_headings":"","what":"ORPHAcodes properties — load_nomenclature","title":"ORPHAcodes properties — load_nomenclature","text":"Load ORPHAcodes properties combined data.frame.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/load_nomenclature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ORPHAcodes properties — load_nomenclature","text":"","code":"load_raw_nomenclature()  load_nomenclature()"},{"path":"https://thorry13.github.io/orphatools/reference/load_nomenclature.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ORPHAcodes properties — load_nomenclature","text":"ORPHAcodes properties data.frame object.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/load_nomenclature.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ORPHAcodes properties — load_nomenclature","text":"label clinical entity name returned label column. displayed language meet needs, consider changing options via orphatools_options() adding new nomenclature pack using add_nomenclature_pack(). classification level clinical entity name returned level column. Classification level can either group disorders, disorder subtype disorder. status ORPHAcode value contained following terms : \"Active\", \"Inactive: Deprecated\", \"Inactive: Obsolete\", \"Inactive: Non rare disease Europe\". disorder type indicates clinical entity's typology returned get_type. details, please read full Orphanet description included nomenclature pack (.pdf).","code":""},{"path":[]},{"path":"https://thorry13.github.io/orphatools/reference/load_redirections.html","id":null,"dir":"Reference","previous_headings":"","what":"Redirections — load_redirections","title":"Redirections — load_redirections","text":"Load obsolete deprecated ORPHAcode corresponding association (Moved Referred ). load_raw_redirections keep original id values Orphanet concept, load_redirections translate according \"orphatools_dict\" option, can set manually using built-options() function orphatools_options() interface.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/load_redirections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Redirections — load_redirections","text":"","code":"load_redirections()  load_raw_redirections()"},{"path":"https://thorry13.github.io/orphatools/reference/load_redirections.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Redirections — load_redirections","text":"data.frame object giving deprecated obsolete ORPHAcodes, corresponding associations association type","code":""},{"path":[]},{"path":"https://thorry13.github.io/orphatools/reference/load_redirections.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Redirections — load_redirections","text":"","code":"df_redirections = load_raw_redirections() df_redirections = load_redirections()"},{"path":"https://thorry13.github.io/orphatools/reference/load_synonyms.html","id":null,"dir":"Reference","previous_headings":"","what":"Synonyms — load_synonyms","title":"Synonyms — load_synonyms","text":"disease can named multiple ways. ORPHAcode, Orphanet provides unique preferential label. name called synonym. function returns data.frame ORPHAcodes, preferential label synonyms .","code":""},{"path":"https://thorry13.github.io/orphatools/reference/load_synonyms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synonyms — load_synonyms","text":"","code":"load_synonyms()"},{"path":"https://thorry13.github.io/orphatools/reference/load_synonyms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Synonyms — load_synonyms","text":"3-columns data.frame indicating ORPHAcode preferential label synonyms. NA set synonyms found.","code":""},{"path":[]},{"path":"https://thorry13.github.io/orphatools/reference/merge_graphs.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge graphs — merge_graphs","title":"Merge graphs — merge_graphs","text":"Convert list graphs single merged graph","code":""},{"path":"https://thorry13.github.io/orphatools/reference/merge_graphs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge graphs — merge_graphs","text":"","code":"merge_graphs(graphs_list)"},{"path":"https://thorry13.github.io/orphatools/reference/merge_graphs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge graphs — merge_graphs","text":"graphs_list graphs merge.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/merge_graphs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge graphs — merge_graphs","text":"merged graph","code":""},{"path":"https://thorry13.github.io/orphatools/reference/merge_graphs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge graphs — merge_graphs","text":"","code":"code = '303' graph_descendants = get_descendants(code, output='graph') graph_ancestors = get_ancestors(code, output='graph')  merged_graph = merge_graphs(list(graph_descendants, graph_ancestors))"},{"path":"https://thorry13.github.io/orphatools/reference/minimize_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Minmize a graph — minimize_graph","title":"Minmize a graph — minimize_graph","text":"Similar induced subgraph, creates shortcut edges vertices primarily connected.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/minimize_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minmize a graph — minimize_graph","text":"","code":"minimize_graph(graph, vs)"},{"path":"https://thorry13.github.io/orphatools/reference/minimize_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minmize a graph — minimize_graph","text":"graph graph minmize vs vertices keep","code":""},{"path":"https://thorry13.github.io/orphatools/reference/minimize_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minmize a graph — minimize_graph","text":"minimized graph, different general induced subgraph edges management.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/minimize_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Minmize a graph — minimize_graph","text":"","code":"# Define the original graph df_edges = data.frame(from=c('A', 'A', 'B'), to=c('B', 'D', 'C')) G = igraph::graph_from_data_frame(df_edges) plot(G, layout=layout_tree)   # Keep the specified vertices (Remove vertex 'B') vs = c('A', 'C', 'D') G_induced = igraph::induced_subgraph(G, vs) plot(G_induced, layout=layout_tree)   G_reduced = minimize_graph(G, vs) plot(G_reduced, layout=layout_tree)"},{"path":"https://thorry13.github.io/orphatools/reference/orpha-genes.html","id":null,"dir":"Reference","previous_headings":"","what":"ORPHAcodes and genes — orpha-genes","title":"ORPHAcodes and genes — orpha-genes","text":"Analyze possible specifications given ORPHAcode genes. specifications found, ORPHAcode-genes combinations considered consistent. Symbols (see load_genes_synonyms() find ) HGNC codes supported, let function know chose mode argument.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/orpha-genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ORPHAcodes and genes — orpha-genes","text":"","code":"specify_code(   orpha_codes,   genes = NULL,   mode = \"HGNC\",   .by = 1:length(orpha_codes) )  check_orpha_gene_consistency(   orpha_codes,   genes = NULL,   mode = \"HGNC\",   .by = 1:length(orpha_codes) )"},{"path":"https://thorry13.github.io/orphatools/reference/orpha-genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ORPHAcodes and genes — orpha-genes","text":"orpha_codes ORPHAcodes update. length greater 1, full set genes applied vector element. genes mutated genes. given list, length-compatible orpha_code, list element corresponds one orpha_codes entry. Set .argument properly apply right set genes ORPHAcode. mode Character constant, whether given genes \"symbol\" \"HGNC\" codes. .Optionnaly, set mutated genes. default consider row independent. Set NULL constant value apply full set genes element orpha_codes. warning raised considered sets contains 10 elements.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/orpha-genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ORPHAcodes and genes — orpha-genes","text":"updated ORPHAcodes, length orpha_codes.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/orpha-genes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ORPHAcodes and genes — orpha-genes","text":"Potential specifications searched among descendants given ORPHAcode. must associated one mutated genes given genes argument. kind association necessarily \"Assessed\" \"Disease-causing\" according Orphanet. specify_code, specification applied unique potential replacement ORPHAcode found. functions, row considered independent default. couple options deal cases individual genes spread multiple rows : Set .argument instead group_by. Use group_by chop() mutated genes list-column ungroup make data row-wise compatible.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/orpha-genes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ORPHAcodes and genes — orpha-genes","text":"","code":"library(dplyr)  #### Basic usage #### orpha_code_cmt1 = 65753 orpha_code_cmtX = 64747  ## Specification possible # CMT1B is the only ORPHAcode both associated with CMT1 and MPZ specify_code(orpha_code_cmt1, 'MPZ', mode='symbol') #> [1] \"101082\" check_orpha_gene_consistency(orpha_code_cmt1, 'MPZ', mode='symbol') #> [1] TRUE  # CMT1B is the only ORPHAcode both associated with CMT1 and MPZ and/or POMT1 specify_code(orpha_code_cmt1, c('MPZ', 'POMT1'), mode='symbol') #> [1] \"101082\" check_orpha_gene_consistency(orpha_code_cmt1, c('MPZ', 'POMT1'), mode='symbol') #> [1] TRUE  ## Specification impossible # No ORPHAcode is associated both to CMTX and MPZ specify_code(orpha_code_cmtX, 'MPZ', mode='symbol') #> [1] \"64747\" check_orpha_gene_consistency(orpha_code_cmtX, 'MPZ', mode='symbol') #> [1] FALSE  # Several ORPHAcodes are associated both to CMT1 and PMP22 (CMT1A and CMT1E) specify_code(orpha_code_cmt1, 'PMP22', mode='symbol') #> [1] \"65753\" check_orpha_gene_consistency(orpha_code_cmt1, 'PMP22', mode='symbol') # TRUE #> [1] TRUE  # Several ORPHAcodes are associated both to CMT1 and PMP22 (CMT1A and CMT1E) # or MPZ (CMT1B), but none with both PMP22 and MPZ. specify_code(orpha_code_cmt1, c('MPZ', 'PMP22'), mode='symbol') #> [1] \"65753\" check_orpha_gene_consistency(orpha_code_cmt1, c('MPZ', 'PMP22'), mode='symbol') # Is it consistent ? #> [1] TRUE  ## Alternatively with HGNC codes (the default mode) # CMT1B is the only ORPHAcode both associated with CMT1 and MPZ specify_code(orpha_code_cmt1, 7225) #> [1] \"101082\"  #### Using dataframes #### df = tibble(   patient_id=c('A', 'A', 'B', 'C', 'D', 'D'),   symbol = c(\"MPZ\", \"LITAF\", \"VWF\", \"LITAF\", \"MPZ\", \"VWF\"),    # CMT1 (ORPHA:65753) and von Willebrand (ORPHA:903)   initial_orpha_code = c(\"65753\", \"65753\", \"903\", \"65753\", \"65753\", \"65753\"))  ## Basic call : each row is independent df_spec = df %>% mutate(assigned_orpha_code =     specify_code(initial_orpha_code, genes=symbol, mode='symbol'))  ## Grouping may be preferable df_spec = df %>% mutate(assigned_orpha_code = specify_code(     initial_orpha_code, genes=symbol, mode='symbol', .by=patient_id))  ## Equivalent method with genes in a list-column df = tibble(   patient_id=c('A', 'B', 'C', 'D'),   initial_orpha_code = c(\"65753\", \"903\", \"65753\", \"65753\"),   symbol = list(c(\"MPZ\", \"LITAF\"), \"VWF\", \"LITAF\", c(\"MPZ\", \"VWF\")))  df_spec = df %>% mutate(assigned_orpha_code =   specify_code(initial_orpha_code, genes=symbol, mode='symbol'))"},{"path":"https://thorry13.github.io/orphatools/reference/orpha_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare grouping — orpha_df","title":"Prepare grouping — orpha_df","text":"class allows performing hierarchical grouping operations using Orphanet classification system. Basically ORPHAcode group built group_by.orpha_df() also contain rows descendants ORPHAcodes. away row may belong several groups. orpha_df class just needs know column ORPHAcodes located work.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/orpha_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare grouping — orpha_df","text":"","code":"orpha_df(   x,   orpha_code_col = \"orpha_code\",   df_classif = NULL,   force_codes = NULL,   mode = \"on\" )"},{"path":"https://thorry13.github.io/orphatools/reference/orpha_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare grouping — orpha_df","text":"x data.frame object data.frame extension. orpha_code_col column name x containing ORPHAcodes. df_classif classification consider, /format. force_codes ORPHAcodes forced appear groups attribute group_by() operation. mode either \"\" (default) convert data.frame orpha_df object \"\" roll back previous class remove relevant attributes.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/orpha_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare grouping — orpha_df","text":"orpha_df instantiation. data.frame extension kept. Former attributes erased orpha_df called multiple times.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/orpha_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare grouping — orpha_df","text":"","code":"library(dplyr)  # Build patients data.frame df_patients = data.frame( patient_id = c(1,1,2,3,4,5,6), code = c('303', '158673', '595356', '305', '79406', '79406', '595356'))  df_counts = df_patients %>%  group_by(code) %>%  count() %>%  as.data.frame()  df_counts = df_patients %>%  orpha_df(orpha_code_col = 'code') %>%  group_by(code) %>%  count() %>%  as.data.frame()"},{"path":"https://thorry13.github.io/orphatools/reference/orphacode-properties.html","id":null,"dir":"Reference","previous_headings":"","what":"ORPHAcode specific properties — orphacode-properties","title":"ORPHAcode specific properties — orphacode-properties","text":"Get specific properties given ORPHAcodes.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/orphacode-properties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ORPHAcode specific properties — orphacode-properties","text":"","code":"get_label(orpha_codes)  get_classification_level(orpha_codes)  get_status(orpha_codes)  is_active(orpha_codes)  get_type(orpha_codes)"},{"path":"https://thorry13.github.io/orphatools/reference/orphacode-properties.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ORPHAcode specific properties — orphacode-properties","text":"orpha_codes ORPHAcodes vector properties returned.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/orphacode-properties.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ORPHAcode specific properties — orphacode-properties","text":"corresponding properties given ORPHAcodes.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/orphacode-properties.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ORPHAcode specific properties — orphacode-properties","text":"label clinical entity name returned get_label. multiple synonyms can associated clinical entity, function returns preferrential labels. get synonyms instead, use get_synonyms. Besides, displayed language meet needs, consider changing options via orphatools_options() adding new nomenclature pack using add_nomenclature_pack(). classification level clinical entity name returned get_classification_level. Classification level can either group disorders, disorder subtype disorder. status ORPHAcode value contained following terms : \"Active\", \"Inactive: Deprecated\", \"Inactive: Obsolete\", \"Inactive: Non rare disease Europe\". returned get_status, is_active just returns TRUE status \"Active\" FALSE else. disorder type indicates clinical entity's typology returned get_type. details, please read full Orphanet description included nomenclature pack (.pdf).","code":""},{"path":"https://thorry13.github.io/orphatools/reference/orphacode-properties.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"ORPHAcode specific properties — orphacode-properties","text":"properties described accessible combined format load_nomenclature function.","code":""},{"path":[]},{"path":"https://thorry13.github.io/orphatools/reference/orphacode-properties.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ORPHAcode specific properties — orphacode-properties","text":"","code":"orpha_codes = c('303', '595356', '79410') get_label(orpha_codes) #> [1] \"Dystrophic epidermolysis bullosa\"                           #> [2] \"Localized dystrophic epidermolysis bullosa\"                 #> [3] \"Localized dystrophic epidermolysis bullosa, pretibial form\" get_classification_level(orpha_codes) #> [1] \"Group\"    \"Disorder\" \"Subtype\"  get_status(orpha_codes) #> [1] \"Active\" \"Active\" \"Active\" is_active(orpha_codes) #> [1] TRUE TRUE TRUE get_type(orpha_codes) #> [1] \"Clinical group\"   \"Disease\"          \"Clinical subtype\""},{"path":"https://thorry13.github.io/orphatools/reference/orphatools_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Options for orphatools — orphatools_options","title":"Options for orphatools — orphatools_options","text":"Interface list set orphatools-related options. Options useful roll back older versions switch languages display. \"orphatools_dict\" refers dictionary used interprete Orphanet concepts ids. \"orphatools_nomenclature\" refers nomenclature pack version (extraction date used language). \"orphatools_gene_file\" refers version file used associated genes ORPHAcodes. options can set manually via built-options() function.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/orphatools_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Options for orphatools — orphatools_options","text":"","code":"orphatools_options()"},{"path":[]},{"path":"https://thorry13.github.io/orphatools/reference/orphatools_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Options for orphatools — orphatools_options","text":"","code":"if (FALSE) orphatools_options() # \\dontrun{}"},{"path":"https://thorry13.github.io/orphatools/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://thorry13.github.io/orphatools/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://thorry13.github.io/orphatools/reference/redirect_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply ORPHAcodes redirections. — redirect_code","title":"Apply ORPHAcodes redirections. — redirect_code","text":"ORPHAcode redirected active ORPHAcode becomes deprecated obsolete, respectively moved (appropriate redirection) referred (suggestion) association type. redirection status \"Inactive: Non rare disease Europe\". Redirection always provided deprecated ORPHAcodes, obsolete ones.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/redirect_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply ORPHAcodes redirections. — redirect_code","text":"","code":"redirect_code(orpha_codes, deprecated_only = TRUE)"},{"path":"https://thorry13.github.io/orphatools/reference/redirect_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply ORPHAcodes redirections. — redirect_code","text":"orpha_codes ORPHAcodes redirect. deprecated_only TRUE, redirect deprecated ORPHAcodes.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/redirect_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply ORPHAcodes redirections. — redirect_code","text":"redirected ORPHAcodes. redirection found, ORPHAcodes remain given, ORPHAcodes may remain inactive redirection.","code":""},{"path":[]},{"path":"https://thorry13.github.io/orphatools/reference/redirect_code.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply ORPHAcodes redirections. — redirect_code","text":"","code":"orpha_codes = c(303, 166068, 166457) redirect_code(orpha_codes) #> [1] \"303\"    \"166063\" \"166457\" redirect_code(orpha_codes, deprecated_only=FALSE) #> [1] \"303\"    \"166063\" \"97275\""},{"path":"https://thorry13.github.io/orphatools/reference/upper-classification-levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Find specific ancestors — upper-classification-levels","title":"Find specific ancestors — upper-classification-levels","text":"functions helps find key ORPHAcodes located given ORPHAcode classification system.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/upper-classification-levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find specific ancestors — upper-classification-levels","text":"","code":"subtype_to_disorder(orpha_code, df_classif = NULL)  get_lowest_groups(orpha_code, df_classif = NULL)"},{"path":"https://thorry13.github.io/orphatools/reference/upper-classification-levels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find specific ancestors — upper-classification-levels","text":"orpha_code vector ORPHAcodes. df_classif classification consider. NULL, loads whole Orphanet classification.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/upper-classification-levels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find specific ancestors — upper-classification-levels","text":"subtype_to_disorder returns associated disorder, ORPHAcode already disorder, NULL group disorders. vector ORPHAcodes provided, function applied element, associated vector returned. get_lowest_groups returns closest groups given ORPHAcode, ORPHAcode group disorders already.","code":""},{"path":"https://thorry13.github.io/orphatools/reference/upper-classification-levels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find specific ancestors — upper-classification-levels","text":"","code":"subtype_to_disorder(orpha_code = '158676') #> [1] \"595356\" # ORPHA:158676 is a subtype of disorder  subtype_to_disorder(orpha_code = '303') #> character(0) # ORPHA:303 is a group of disorder  get_lowest_groups(orpha_code = '158676') #> [1] \"303\""}]
